name: "Android Build"

on:
  workflow_call:
    secrets:
      ANDROID_KEY_ALIAS:
        required: true
      ANDROID_KEY_PASSWORD:
        required: true
      ANDROID_KEY_BASE64:
        required: true
  push:
    branches:
      - master
    paths:
      - 'src-tauri/**'
      - 'src/**'
      - 'static/**'
      - 'package.json'
      - 'bun.lockb'
      - 'svelte.config.js'
      - 'tailwind.config.js'
      - 'vite.config.js'
      - '.github/workflows/build_android.yml'
  pull_request:
    paths:
        - 'src-tauri/**'
        - 'src/**'
        - 'static/**'
        - 'package.json'
        - 'bun.lockb'
        - 'svelte.config.js'
        - 'tailwind.config.js'
        - 'vite.config.js'
        - '.github/workflows/build_android.yml'

jobs:
  setup-android-env:
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: false
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Get version
        id: get-version
        run: |
          VERSION=$(grep '^version[[:space:]]*=[[:space:]]*"' src-tauri/Cargo.toml | sed 's/^version[[:space:]]*=[[:space:]]*"\(.*\)"/\1/')
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Setup bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.1.39

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-linux-android,armv7-linux-androideabi,x86_64-linux-android,i686-linux-android

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android NDK
        run: |
          sdkmanager --install "ndk;25.2.9519653"
          echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> $GITHUB_ENV
          echo "NDK_HOME=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> $GITHUB_ENV

      - name: Install frontend dependencies
        run: bun install

      - name: Cache build environment
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
            /usr/local/lib/android/sdk
            ~/.gradle/caches
            ~/.gradle/wrapper
            src-tauri/gen/android/.gradle
            ~/.rustup
            $ANDROID_HOME
            $JAVA_HOME
          key: android-build-env-${{ runner.os }}-${{ hashFiles('**/bun.lockb', '**/Cargo.lock', 'src-tauri/gen/android/**/*.gradle*') }}

      - name: Setup Android signing
        run: |
          cd src-tauri/gen/android/app
          echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" > keystore.properties
          echo "password=${{ secrets.ANDROID_KEY_PASSWORD }}" >> keystore.properties
          base64 -d <<< "${{ secrets.ANDROID_KEY_BASE64 }}" > keystore.jks
          echo "storeFile=keystore.jks" >> keystore.properties

      - name: Upload keystore config
        uses: actions/upload-artifact@v4
        with:
          name: android-keystore
          path: src-tauri/gen/android/app/

  build-android-universal:
    needs: setup-android-env
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: false
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Download keystore config
        uses: actions/download-artifact@v4
        with:
          name: android-keystore
          path: src-tauri/gen/android

      - name: Setup bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.1.39

      - name: Restore build environment
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
            /usr/local/lib/android/sdk
            ~/.gradle/caches
            ~/.gradle/wrapper
            src-tauri/gen/android/.gradle
            ~/.rustup
            $ANDROID_HOME
            $JAVA_HOME
          key: android-build-env-${{ runner.os }}-${{ hashFiles('**/bun.lockb', '**/Cargo.lock', 'src-tauri/gen/android/**/*.gradle*') }}

      - name: Install frontend dependencies
        run: bun install

      - name: Build Android universal binary
        run: |
          export ANDROID_NDK_HOME=/usr/local/lib/android/sdk/ndk/25.2.9519653
          export NDK_HOME=/usr/local/lib/android/sdk/ndk/25.2.9519653
          export JAVA_HOME=/usr/lib/jvm/temurin-17-jdk-amd64
          bun tauri android build

      - name: Prepare universal artifact
        run: |
          mkdir -p android-artifacts
          cp src-tauri/gen/android/app/build/outputs/bundle/release/app-release.aab android-artifacts/whitenoise-${{ needs.setup-android-env.outputs.version }}-android-universal.aab
          cd android-artifacts
          sha256sum whitenoise-${{ needs.setup-android-env.outputs.version }}-android-universal.aab > whitenoise-${{ needs.setup-android-env.outputs.version }}-android-universal.aab.sha256

      - name: Upload universal artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-universal
          path: android-artifacts/*

  build-android-arch-specific:
    needs: setup-android-env
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: false
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Download keystore config
        uses: actions/download-artifact@v4
        with:
          name: android-keystore
          path: src-tauri/gen/android

      - name: Setup bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.1.39

      - name: Restore build environment
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
            /usr/local/lib/android/sdk
            ~/.gradle/caches
            ~/.gradle/wrapper
            src-tauri/gen/android/.gradle
            ~/.rustup
            $ANDROID_HOME
            $JAVA_HOME
          key: android-build-env-${{ runner.os }}-${{ hashFiles('**/bun.lockb', '**/Cargo.lock', 'src-tauri/gen/android/**/*.gradle*') }}

      - name: Install frontend dependencies
        run: bun install

      - name: Build Android arch specific binaries
        run: |
          export ANDROID_NDK_HOME=/usr/local/lib/android/sdk/ndk/25.2.9519653
          export NDK_HOME=/usr/local/lib/android/sdk/ndk/25.2.9519653
          export JAVA_HOME=/usr/lib/jvm/temurin-17-jdk-amd64
          bun tauri android build --apk --split-per-abi

      - name: Prepare arch-specific artifacts
        run: |
          mkdir -p android-artifacts
          for type in arm64 arm x86 x86_64; do
            if [ -f "src-tauri/gen/android/app/build/outputs/apk/${type}/release/app-${type}-release.apk" ]; then
              cp "src-tauri/gen/android/app/build/outputs/apk/${type}/release/app-${type}-release.apk" "android-artifacts/whitenoise-${{ needs.setup-android-env.outputs.version }}-android-${type}.apk"
            fi
          done
          cd android-artifacts
          for file in *.apk; do
            if [ -f "$file" ]; then
              sha256sum "$file" > "${file}.sha256"
            fi
          done

      - name: Upload arch-specific artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-arch-specific
          path: android-artifacts/*
