name: "Build"

on:
  workflow_call:
    secrets:
      APPLE_ID:
        required: true
      APPLE_PASSWORD:
        required: true
      APPLE_TEAM_ID:
        required: true
      APPLE_CERTIFICATE:
        required: true
      APPLE_CERTIFICATE_PASSWORD:
        required: true
      KEYCHAIN_PASSWORD:
        required: true
      GPG_PRIVATE_KEY:
        required: true
      GPG_PASSPHRASE:
        required: true
  push:
    branches:
      - master
    paths:
      - 'src-tauri/**'
      - 'src/**'
      - 'static/**'
      - 'package.json'
      - 'bun.lockb'
      - 'svelte.config.js'
      - 'tailwind.config.js'
      - 'vite.config.js'
      - '.github/workflows/build.yml'
  pull_request:
    paths:
        - 'src-tauri/**'
        - 'src/**'
        - 'static/**'
        - 'package.json'
        - 'bun.lockb'
        - 'svelte.config.js'
        - 'tailwind.config.js'
        - 'vite.config.js'
        - '.github/workflows/build.yml'

jobs:
  build-tauri:
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS desktop builds
          - name: "macOS (Apple Silicon)"
            platform: "macos-latest"
            args: "--target aarch64-apple-darwin"
            arch: "aarch64"
          - name: "macOS (Intel)"
            platform: "macos-latest"
            args: "--target x86_64-apple-darwin"
            arch: "x86_64"
          # Linux desktop builds
          - name: "Linux Desktop"
            platform: "ubuntu-22.04"
            args: ""

    runs-on: ${{ matrix.platform }}
    env:
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
    steps:
      - uses: actions/checkout@v4

      - name: Cache bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Setup bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.1.39

      - name: Add Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          # Specify the working directory for Rust cache
          workspaces: "src-tauri -> target"
          # Cache cargo registry
          cache-directories: |
            ~/.cargo/registry
            ~/.cargo/git
          # Add a suffix to distinguish between different platforms and architectures
          key: ${{ matrix.platform }}${{ matrix.arch && '-' }}${{ matrix.arch }}

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: >-
            ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Install frontend dependencies
        run: bun install

      - name: Import Apple Developer Certificate
        if: matrix.platform == 'macos-latest'
        id: import_apple_certificate
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-keychain-settings -t 3600 -l build.keychain
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          security list-keychains -s build.keychain
          security list-keychains
          security find-identity -v -p codesigning build.keychain

      - name: Verify Certificate
        if: matrix.platform == 'macos-latest'
        id: verify_apple_certificate
        run: |
          security find-identity -v -p codesigning build.keychain
          CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application")
          CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
          echo "cert_id=$CERT_ID" >> "$GITHUB_OUTPUT"
          echo "Apple Developer Certificate imported."

      - name: Import GPG key
        if: matrix.platform == 'ubuntu-22.04'
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          trust_level: 5

      # Split the build step into two different actions based on the target
      - name: Build Desktop App
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Apple signing
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ matrix.platform == 'macos-latest' && 'Developer ID Application' || '' }}
          # AppImage signing
          LDAI_SIGN: ${{ matrix.platform == 'ubuntu-22.04' }}
          LDAI_SIGN_KEY: ${{ matrix.platform == 'ubuntu-22.04' && steps.import_gpg.outputs.keyid || '' }}
          LDAI_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          # DEB signing
          TAURI_SIGNING_KEY: ${{ matrix.platform == 'ubuntu-22.04' && steps.import_gpg.outputs.keyid || '' }}
          TAURI_SIGNING_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          # RPM signing
          RPM_SIGNING_KEY: ${{ matrix.platform == 'ubuntu-22.04' && steps.import_gpg.outputs.keyid || '' }}
          RPM_SIGNING_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        with:
          args: ${{ matrix.args }}

      - name: Generate desktop artifact hashes
        run: |
          if [ "${{ matrix.platform }}" = "ubuntu-22.04" ]; then
            # Get version from Cargo.toml
            VERSION=$(grep '^version[[:space:]]*=[[:space:]]*"' src-tauri/Cargo.toml | sed 's/^version[[:space:]]*=[[:space:]]*"\(.*\)"/\1/')
            cd src-tauri/target/release/bundle
            # Generate hash for each Linux package
            find . -type f -name "*.deb" -exec sh -c '
              VERSION="$1"
              FILE="$2"
              sha256sum "$FILE" | sed "s|  .*|  whitenoise-${VERSION}-linux-amd64.deb|" > "${FILE}.sha256"
            ' sh "$VERSION" {} \;
            find . -type f -name "*.rpm" -exec sh -c '
              VERSION="$1"
              FILE="$2"
              sha256sum "$FILE" | sed "s|  .*|  whitenoise-${VERSION}-linux-x86_64.rpm|" > "${FILE}.sha256"
            ' sh "$VERSION" {} \;
            find . -type f -name "*.AppImage" -exec sh -c '
              VERSION="$1"
              FILE="$2"
              sha256sum "$FILE" | sed "s|  .*|  whitenoise-${VERSION}-linux-x86_64.AppImage|" > "${FILE}.sha256"
            ' sh "$VERSION" {} \;
          elif [ "${{ matrix.platform }}" = "macos-latest" ]; then
            # Get version from Cargo.toml
            VERSION=$(grep '^version[[:space:]]*=[[:space:]]*"' src-tauri/Cargo.toml | sed 's/^version[[:space:]]*=[[:space:]]*"\(.*\)"/\1/')
            cd src-tauri/target/${{ matrix.arch }}-apple-darwin/release/bundle
            # Generate hash for macOS app bundle
            cd macos
            find . -type f -name "*.app" -exec sh -c '
              VERSION="$1"
              FILE="$2"
              shasum -a 256 "$FILE" | sed "s|  .*|  whitenoise-${VERSION}-macos-${{ matrix.arch }}.app|" > "${FILE}.sha256"
            ' sh "$VERSION" {} \;
            find . -type f -name "*.app.tar.gz" -exec sh -c '
              VERSION="$1"
              FILE="$2"
              shasum -a 256 "$FILE" | sed "s|  .*|  whitenoise-${VERSION}-macos-${{ matrix.arch }}.app.tar.gz|" > "${FILE}.sha256"
            ' sh "$VERSION" {} \;
            # Generate hash for DMG
            cd ../dmg
            find . -type f -name "*.dmg" -exec sh -c '
              VERSION="$1"
              FILE="$2"
              shasum -a 256 "$FILE" | sed "s|  .*|  whitenoise-${VERSION}-macos-${{ matrix.arch }}.dmg|" > "${FILE}.sha256"
            ' sh "$VERSION" {} \;
          fi

      - name: Prepare Desktop artifacts
        run: |
          # Get version from Cargo.toml
          VERSION=$(grep '^version[[:space:]]*=[[:space:]]*"' src-tauri/Cargo.toml | sed 's/^version[[:space:]]*=[[:space:]]*"\(.*\)"/\1/')
          echo "Version: $VERSION"
          mkdir -p desktop-artifacts

          if [ "${{ matrix.platform }}" = "ubuntu-22.04" ]; then
            # Linux packages
            find src-tauri/target/release/bundle/deb -name "*.deb" -exec sh -c '
              cp "$1" desktop-artifacts/whitenoise-'"$VERSION"'-linux-amd64.deb
              cp "${1}.sha256" desktop-artifacts/whitenoise-'"$VERSION"'-linux-amd64.deb.sha256
            ' sh {} \;

            find src-tauri/target/release/bundle/rpm -name "*.rpm" -exec sh -c '
              cp "$1" desktop-artifacts/whitenoise-'"$VERSION"'-linux-x86_64.rpm
              cp "${1}.sha256" desktop-artifacts/whitenoise-'"$VERSION"'-linux-x86_64.rpm.sha256
            ' sh {} \;

            find src-tauri/target/release/bundle/appimage -name "*.AppImage" -exec sh -c '
              cp "$1" desktop-artifacts/whitenoise-'"$VERSION"'-linux-x86_64.AppImage
              cp "${1}.sha256" desktop-artifacts/whitenoise-'"$VERSION"'-linux-x86_64.AppImage.sha256
            ' sh {} \;

          elif [ "${{ matrix.platform }}" = "macos-latest" ]; then
            # macOS packages
            find src-tauri/target/${{ matrix.arch }}-apple-darwin/release/bundle/dmg -name "*.dmg" -exec sh -c '
              cp "$1" desktop-artifacts/whitenoise-'"$VERSION"'-macos-${{ matrix.arch }}.dmg
              cp "${1}.sha256" desktop-artifacts/whitenoise-'"$VERSION"'-macos-${{ matrix.arch }}.dmg.sha256
            ' sh {} \;

            find src-tauri/target/${{ matrix.arch }}-apple-darwin/release/bundle/macos -name "*.app.tar.gz" -exec sh -c '
              cp "$1" desktop-artifacts/whitenoise-'"$VERSION"'-macos-${{ matrix.arch }}.app.tar.gz
              cp "${1}.sha256" desktop-artifacts/whitenoise-'"$VERSION"'-macos-${{ matrix.arch }}.app.tar.gz.sha256
            ' sh {} \;
          fi

      - name: List desktop artifacts
        run: |
          find desktop-artifacts/* -type f

      - name: Upload Desktop artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}${{ matrix.arch && '-' }}${{ matrix.arch }}
          path: desktop-artifacts/*
